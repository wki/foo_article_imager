=encoding utf-8

=head1 Imager - eine universelle Bildverarbeitungs-Bibliothek

=head2 Motivation

Immer wieder ergibt sich die Problemstellung, Thumbnails zu erstellen, Bilder
mit Wasserzeichen, einem Logo oder Text zu versehen oder gar Graphiken von
Grund auf selbst zu erstellen. Greift man zum Klassiker ImageMagick? Oder gibt
es Alternativen? Mein persönlicher Favorit ist L<Imager>, eine schnelle und
universelle Bibliothek zur Bildbearbeitung, die auf diverse in C geschriebene
Bibliotheken zurück greift.

Um L<Imager> schmackhaft zu machen, möchte ich mit einem kurzen Benchmark
beginnen. Eine JPEG-Datei aus einer 16 Megapixel Kamera soll zu einem
Thumbnail mit einer Breite von 150 Pixeln konvertiert werden. Alle erzeugten
JPEG Dateien wurden mit jeweils der maximal möglichen Qualität erzeugt, damit
auch Unterschiede in puncto Qualität vergleichbar zu machen.

Angetreten sind ImageMagick als Kommandozeile (Convert), L<Image::Magick>,
L<GD>, L<Imager> und L<Image::Epeg>.

              Rate Convert  Magick      GD  Imager    Epeg
    Convert 1.14/s      --     -6%    -25%    -52%    -91%
    Magick  1.22/s      7%      --    -19%    -48%    -90%
    GD      1.52/s     32%     24%      --    -36%    -88%
    Imager  2.37/s    107%     94%     57%      --    -81%
    Epeg    12.3/s    974%    905%    711%    418%      --

Schön, L<Imager> ist etwa doppelt so schnell wie ImageMagick, unabhängig
davon, ob die Kommandozeilen- oder Perl-Version von ImageMagick benutzt wird.
Absoluter Gewinner ist L<Image::Epeg>, das nochmal um Faktor 4 schneller ist.
Leider kann letzteres Modul lediglich JPEG Dateien lesen und erzeugen.
Außerdem kennt diese Bibliothek keinerlei Bildmanipulations-Befehle, scheidet
daher bei vielen Anforderungen aus. Die Qualität der erzeugten Bilder ist
ebenfalls die schlechteste der 4 Test-Kandidaten.

Dass ImageMagick langsamer ist als Imager, ist ebenfalls erklärbar. Imager
beherrscht keinerlei Farbmanagement, kann also nicht mit Farbprofilen umgehen
und kann Metadaten aus Bildern weder lesen noch schreiben. ImageMagick kann
neben vielen weiteren Funktionalitäten damit umgehen, was der Ausführungszeit
leider nicht gerade entgegen kommt. Auch entschädigt die längere Laufzeit
mit geringfügig schärferen Ergebnissen.

=head2 Installation

Etwas Vorsicht ist beim Installieren von Imager geboten, denn Imager sucht
nach zahlreichen C-Bibliotheken und bindet alles verfügbare ein. Je nach
Zustand des Systems, auf dem Imager compiliert wird, fällt der Funktionsumfang
daher unter Umständen ganz anders aus. Fehlermeldungen gibt es nicht, denn
dieses Verhalten ist zunächst so beabsichtigt, um möglichst flexibel zu sein.

Wer Transparenz möchte, kann sich zum Beispiel so behelfen, allerdings ist das
natürlich kein Weg für automatisierbare Installationen.

    $ cpanm --interactive Imager
    ...
    Libraries found:
      FT2
      JPEG
      PNG
      T1
      TIFF
    Libraries *not* found:
      GIF
      Win32
    OK
    Building and testing Imager-0.97 ... OK
    Successfully reinstalled Imager-0.97
    1 distribution installed

In diesem Fall kann Imager auf einem *nix System nicht mit GIF Dateien
umgehen, da die dafür benötigte Bibliothek nicht gefunden wurde. Die
zusätzliche Distribution L<Imager::File::GIF> wird in diesem Fall einfach
nicht mit installiert.

Wenn ein Projekt bestimmte Dateiformate benötigt, kann die zusätzliche
Installation der diversen zusätzlichen Distributionen L<Imager::File::*> oder
L<Imager::Font::*> vornehmen. Laufen die Tests der Installation erfolgreich
durch, ist alles im grünen Bereich. Fehlschlagende Tests lassen dann relativ
schnell Rückschlüsse auf fehlende oder inkompatible C-Bibliotheken zu.

    $ cpanm Imager::File::GIF
    --> Working on Imager::File::GIF
    Fetching .../authors/id/T/TO/TONYC/Imager-File-GIF-0.88.tar.gz ... OK
    Configuring Imager-File-GIF-0.88 ... N/A
    ! Configure failed for Imager-File-GIF-0.88.
      See .cpanm/build.log for details.

=head2 Funktionsumfang

Um einen Teil der Möglichkeiten von Imager kennen zu lernen, soll aus einem
vorgegebenen Bild eine neue Graphik erzeugt werden, die einen Abspiel-Button
in der Mitte sowie ein Logo in einer Ecke besitzt. Um erweiterbar zu sein und
den Programmcode leichter nachvollziehbar zu halten, erzeugen wir eine
einfache Klasse (Thumbnail), in der die verwendeten Operationen sowie ein
Imager-Objekt gekapselt sind. Die Erzeugung unserer Graphik sieht dann so aus:

    Thumbnail
        ->load($source_file)
        ->scale(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT)
        ->add_play_icon(PLAY_ICON_RADIUS)
        ->add_logo($logo_file)
        ->add_copyright
        ->save($button_file);

Die einzelnen Operationen sind relativ schnell abgehandelt und hoffentlich
weitgehend selbstsprechend. Die von uns eingesetzte Klasse besitzt lediglich
ein Attribut (image), in dem das Imager-Bild im jeweils aktuellen Zustand
gehalten wird.

    package Thumbnail;
    use Moose;
    use Imager;
    
    has image => (
        is  => 'rw',
        isa => 'Imager',
    );

=over

=item Bild Datei lesen

    sub load {
        my ($class, $file) = @_;
        
        my $self = $class->new;

        $self->image(Imager->new(file => $file));
    
        return $self;
    }
    
=item Skalieren und in korrekte Größe bringen

Die Skalierung erfordert zwei Arbeitsschritte, denn die reine Skalierung
behält das Seitenverhältnis des Bildes bei. Wir müssen also das skalierte
Bild noch zuschneiden.

    sub scale {
        my ($self, $width, $height) = @_;
    
        # skalieren -- erzeugtes Bild ist zu groß
        my $image = $self->image->scale(
            xpixels => $width,
            ypixels => $height,
            type    => 'max',
            qtype   => 'mixing',
        );
    
        # zuschneiden -- Mitte ist Fixpunkt
        my $left = int(($image->getwidth  - $width)  / 2);
        my $top  = int(($image->getheight - $height) / 2);
        $image = $image->crop(
            left   => $left,
            right  => $left + $width,
            top    => $top,
            bottom => $top + $height,
        );
    
        $self->image($image);
    
        return $self;
    }

=item Zeichnen eines einfachen Abspiel-Pfeils

    sub add_play_icon {
        my ($self, $radius) = @_;
    
        my $center_x = int($self->image->getwidth  / 2);
        my $center_y = int($self->image->getheight / 2);
    
        # große schwaze Fläche
        $self->image->circle(
            color => '#000000',
            r     => $radius + 2,
            x     => $center_x,
            y     => $center_y,
            aa    => 1,
        );
    
        # etwas kleinere weiße Fläche
        $self->image->circle(
            color => '#ffffff', # weiss
            r     => $radius,
            x     => $center_x,
            y     => $center_y,
            aa    => 1,
        );
    
        # schwarzes Dreieck
        my $delta = ($radius - 2) / sqrt(2);
        $self->image->polygon(
            color  => '#000000',
            points => [
                [ $center_x - $delta,      $center_y - $delta],
                [ $center_x + $radius - 2, $center_y ],
                [ $center_x - $delta,      $center_y + $delta],
            ],
            aa     => 1,
        );
    
        return $self;
    }

=item Hinzufügen eines Logos aus anderer Bild-Datei
    
    sub add_logo {
        my ($self, $file) = @_;
    
        my $logo = Imager->new(file => $file);
        $self->image->paste(
            left => $self->image->getwidth  - $logo->getwidth  - 1,
            top  => $self->image->getheight - $logo->getheight - 1,
            src  => $logo,
        );
    
        return $self;
    }

=item Text zeichnen

    sub add_copyright {
        my $self = shift;
        
        my $text = 'WKI';
        my $font = Imager::Font->new(
            file => "$FindBin::Bin/Twister.ttf",
        );
        
        $self->image->string(
            string => $text,
            x      => 5,
            y      => $self->image->getheight - 10,
            color  => '#ffffff',
            font   => $font,
            size   => 20,
            aa     => 1,
        );
        
        return $self;
    }

=item speichern des erzeugten Bildes

    sub save {
        my ($self, $file) = @_;
    
        $self->image->write(
            file => $file,
        );
    
        return $self;
    }
    
=back



* Image::Magick
  Abhängigkeit von ImageMagick C-libs
  /usr/local/include, /usr/local/lib als Suchpfad :-(
  --> patch auf /opt/local/...
  /opt/local/include/ImageMagick-6/magick/MagickCore.h
  --> Profile erhalten, JFIF (?) Daten bleiben erhalten
  --> gute Qualität

* GD : Erzeugen von Bildern
  Abhängigkeit von gd2 C-libs
  --> Profile--, JFIF--
  --> mittelmäßige Qualität

* Imager
  Abhängigkeit von diversen kleinen Konvertierungs-Bibliotheken
  --> Profile--, JFIF--
  --> gute Qualität

* Image::Epeg
  C-Bibliothek mit dabei, am leichtetsten zu installieren
  --> Profile--, JFIF--
  --> relativ unscharf

* Image::Thumbnail
  Facade für beliebige der obigen Bibliotheken

=head2 Zugabe

Imager kann noch viel mehr. Dank der brillianten Dokumentation sind die
notwendigen Methoden und deren Argumente auch schnell herauszufinden. Nicht
unerwähnt bleiben sollten die Funktionalitäten dennoch:

=over

=item Füll-Funktionen

gezeichnete Flächen lassen sich nicht nur mit soliden Farben füllen, sondern
auch mit Mustern, Scraffuren, Verläufen oder sich wiederholenden Bildern.

=item Transformationen

neben der gezeigten Skalierung stehen auch Streckungen, Rotationen und
Spiegelungen zur Verfügung.

=item Farb-Manipulationen

Diverse Operationen bieten Farb-Operationen, Helligkeits- und
Kontrastveränderungen sowie diverse arithmetische Veränderungen beim
Zusammenfügen verschiedener Einzelteile.

=item Transparenzen

Imager kann wahlweise einen Alpha-Kanel mitführen, der beim Erzeugen von zum
Beispiel PNG- oder GIF-Bildern transparente Bilder produzieren kann.

=item Anti-Aliasing

fast jeder Zeichenbefehl beherrscht die Option C<aa>, mit der die Kanten der
gezeichten Objekte geglättet werden, was optisch ansprechendere Ergebnisse
zur Folge hat.

=item Filter

Fast schon Photoshop-Niveau hat die Liste der zur Verfügung stehenden Filter
Funktionen. Damit stehen eine ganze Reihe von Verwandlungs- und
Verfremdungs-Befehle zur Auswahl.

=back


=head2 Letzte Zugabe

zahlreiche CPAN Autoren haben Imager ebenfalls in ihr Herz geschlossen und
diverse Distributionen auf Imager aufgebaut.

=over

=item Imager::Montage

Erlaubt die Erzeugung einer Komposition aus 

=item Imager::Graph


=back


Links:

Image Magick Installation
http://globalmoxie.com/blog/imagemagick-install-osx.shtml



ADAMK/Imager-Search-1.01.tar.gz
ADDI/Imager-Album-0.06.tar.gz
ADDI/Imager-Plot-0.09.tar.gz
BASHI/Imager-DTP-0.06.tar.gz
CFRANKS/HTML-FormFu-Imager-1.00.tar.gz
CORNELIUS/Imager-Montage-0.02.tar.gz
COSIMO/Imager-SkinDetector-0.05.tar.gz
DAMBAR/Catalyst-Plugin-Imager-0.01.tar.gz
DARNOLD/Imager-Tiler-1.01.tar.gz
EBRUNI/Image-Imager-Thumbnail-0.01.tar.gz
GRAF/Imager-Simple-0.010003.tar.gz
JOHND/ASP4x-Captcha-Imager-0.003.tar.gz
KALEX/Apache2-Imager-Resize-0.16.tar.gz
KAWAMURAY/Imager-Heatmap-0.03.tar.gz
KRYDE/Image-Base-Imager-11.tar.gz
KURIHARA/Imager-Filter-Sepia-0.02.tar.gz
KURIHARA/Imager-QRCode-0.034.tar.gz
MSCHILLI/Video-Capture-V4l-Imager-0.01.tar.gz
MZSANFORD/Imager-TimelineDiagram-0.15.tar.gz
RSAVAGE/jQuery-File-Upload-Imager-1.01.tgz
TADZIK/Imager-GIF-0.002.tar.gz
TEEJAY/Imager/Chart/Imager-Chart-Radial-0.1.tar.gz
TKREMER/Template-Plugin-Imager-0.01.tar.gz
TOKUHIROM/Imager-Filter-FishEye-0.04.tar.gz
TOMITA/Imager-Filter-Bakumatsu-0.03.tar.gz
TONYC/Imager-0.97.tar.gz
TONYC/Imager-File-GIF-0.88.tar.gz
TONYC/Imager-File-JPEG-0.88.tar.gz
TONYC/Imager-File-PNG-0.89.tar.gz
TONYC/Imager-File-TIFF-0.88.tar.gz
TONYC/Imager-Font-FT2-0.92.tar.gz
TONYC/Imager-Font-T1-1.022.tar.gz
TONYC/Imager-Font-W32-0.88.tar.gz
TONYC/Imager-Graph-0.10.tar.gz
TONYC/Imager-Screenshot-0.013.tar.gz
TYPESTER/Imager-Filter-RoundedCorner-0.02.tar.gz
VVELOX/Imager-AverageGray-0.0.0.tar.gz
WKI/Catalyst-Controller-Imager-0.05.tar.gz
WROSS/Apache-Imager-Resize-0.11.tar.gz
YAPPO/Imager-ExifOrientation-0.07.tar.gz
